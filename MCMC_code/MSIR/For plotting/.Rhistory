dIm = age.plus*Im_min - age.minus*Im + lambda_m*S - gamma_m*Im
dR = age.plus[1:(n.age-1)]*R_min[1:(n.age-1)] - age.minus[1:(n.age-1)]*R + gamma_s*Is[1:(n.age-1)] + gamma_m*Im[1:(n.age-1)] - tau*R
# fix the last age compartment in R to conserve pop size
#dM =  mu*N*c(1,0,0,0,0,0) - c(1/8,1/8,0,0,0,0)*M + c(0,1/8,0,0,0,0)*M_min - delta*M
#dS = age.plus*S_min - age.minus*S + delta*M - lambda*S + c(0,0,1/8,0,0,0)*M_min + tau*R
#dIs = age.plus*Is_min - age.minus*Is + lambda_s*S - gamma_s*Is
#dIm = age.plus*Im_min - age.minus*Im + lambda_m*S - gamma_m*Im
#dR = age.plus*R_min - age.minus*R + gamma_s*Is + gamma_m*Im - tau*R
return(list(c(dM,dS,dIs,dIm,dR)))
#})
}
runSIR = function(b,phi, case.t,beta1,beta2,beta3,beta4,beta5,beta6,atol) {
#print(beta1)
times = 1:case.t
N = 324935
M.0 = N*13/(5*52) # initial number of children <13weeks protected by maternal immunity
eq = (N-M.0)/5 # compartments besides M; choose starting values equally spread among compartments
init.vals = c(M=c(M.0,rep(0,n.age-1)),S=rep(eq/n.age,n.age),Is=rep(eq/n.age,n.age),Im=rep(eq/n.age,n.age),R=rep(eq/n.age,n.age-1))
#init.vals = c(M=c(M.0,rep(0,n.age-1)),S=rep(eq/n.age,n.age),Is=rep(eq/n.age,n.age),Im=rep(eq/n.age,n.age),R=rep(eq/n.age,n.age))
pars  <- list(	gamma_s	= 1,		# 1/mean infectious period(weeks), severe infection
gamma_m	= 2,		# 1/mean infectious period(weeks), mild infection
delta	= 1/13,		# 1/mean period of maternal immunity
tau	= 	1/52,		# 1/mean period of immunity following infection
N	  	= N,		# population(assume constant)
b		= b,		# seasonality amplitude
phi		= phi,		# seasonality offset (weeks)
beta1 = beta1,
beta2 = beta2,
beta3 = beta3,
beta4 = beta4,
beta5 = beta5,
beta6 = beta6
)
ode.out = lsoda(init.vals,times,SIRseason,pars, atol = atol)
return( ode.out )
}
# fitted posterior mean from rotavirus data (Park et al, 2017)
# they are parmeters of interst in our simulation studies
b = 0.43
phi = 7.35
r = 0.90
rho = 0.027
# they are provided in (Park et al, 2017)
N = 324935
longterm = 5*52 + 118
beta = c(1.30537122, 3.11852393, 0.03206678, 3.24118948, 0.31400672, 0.09410381)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1e-4)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1e-1)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6])
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=10)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1000)
runSIR = function(b,phi, case.t,beta1,beta2,beta3,beta4,beta5,beta6,atol) {
#print(beta1)
times = 1:case.t
N = 324935
M.0 = N*13/(5*52) # initial number of children <13weeks protected by maternal immunity
eq = (N-M.0)/5 # compartments besides M; choose starting values equally spread among compartments
init.vals = c(M=c(M.0,rep(0,n.age-1)),S=rep(eq/n.age,n.age),Is=rep(eq/n.age,n.age),Im=rep(eq/n.age,n.age),R=rep(eq/n.age,n.age-1))
#init.vals = c(M=c(M.0,rep(0,n.age-1)),S=rep(eq/n.age,n.age),Is=rep(eq/n.age,n.age),Im=rep(eq/n.age,n.age),R=rep(eq/n.age,n.age))
pars  <- list(	gamma_s	= 1,		# 1/mean infectious period(weeks), severe infection
gamma_m	= 2,		# 1/mean infectious period(weeks), mild infection
delta	= 1/13,		# 1/mean period of maternal immunity
tau	= 	1/52,		# 1/mean period of immunity following infection
N	  	= N,		# population(assume constant)
b		= b,		# seasonality amplitude
phi		= phi,		# seasonality offset (weeks)
beta1 = beta1,
beta2 = beta2,
beta3 = beta3,
beta4 = beta4,
beta5 = beta5,
beta6 = beta6
)
ode.out = lsoda(init.vals,times,SIRseason,pars)#, atol = atol)
return( ode.out )
}
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1000)
help(lsoda)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=100000000)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=100000000)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1)
rm(list=ls())
######################################################################################
##	Simulation of Rotavirus example
######################################################################################
set.seed(135)
# contact matrix
# simplest assumption: mixing only happens within own age groups (diagonal)
#contact = diag(6)
n.age = 6
# fraction of pop in each age class
frac.pop = c(2,2,2,6,12,36)/(5*12)
# better assumption: mixing is homogeneous (equal contact b/t all age groups)
# this accounts for pop differences b/t groups
contact = matrix(1,nrow=n.age,ncol=n.age)
for(i in 1:6) {
for(j in 1:i) {
contact[i,j] = frac.pop[i]/frac.pop[j]
}
}
#contact = t(contact)
# estimated in the rotavirus paper
#beta = c(1.30537122, 3.11852393, 0.03206678, 3.24118948, 0.31400672, 0.09410381)
######################################################################################
##	Construct time-varying mu(t)
######################################################################################
plotweeks = as.Date("2009-12-23")
week.0 = plotweeks[1] - 3.5 # so that t=1 is the midpoint of the first week
mu.0 = 1/(52*5)	# estimated baseline birth rate
# monthly amplitude from 1980-2000, Audrey Dorelien's thesis on birth seasonality in sub-Saharan Africa
amplitude = c(-.17,.01,.03,.25,.12,.03,-.01,.09,.01,.13,-.31,-.17)
# write mu(t) function that returns the month for a given time t
# window version
mu = function(t) {
mon = as.numeric( months( week.0 + 7*t, abb=TRUE ) )
mu.0 * ( 1 + amplitude[ mon ] )
}
# mac/linux version
#mu = function(t) {
#  dummy =  months( week.0 + 7*t, abb=TRUE )
#  mon = match(dummy,month.abb)
#  mu.0 * ( 1 + amplitude[ mon ] )
#}
######################################################################################
##	The SIRS Model
######################################################################################
library(deSolve) # integrate ODEs with function lsoda()
# differential equations for the SIR model with seasonality
SIRseason = function(Time, State, Pars) {
#with(as.list(c(State, Pars)), {
gamma_s	= Pars[[1]]
gamma_m	= Pars[[2]]
delta	= Pars[[3]]
tau		= Pars[[4]]
N	  	= Pars[[5]]
b		= Pars[[6]]
phi		= Pars[[7]]
beta1 = Pars[[8]]
beta2 = Pars[[9]]
beta3 = Pars[[10]]
beta4 = Pars[[11]]
beta5 = Pars[[12]]
beta6 = Pars[[13]]
beta = c(beta1, beta2, beta3, beta4, beta5, beta6)
M  = State[1:n.age]
S = State[(n.age+1):(2*n.age)]
Is = State[(2*n.age+1):(3*n.age)]
Im = State[(3*n.age+1):(4*n.age)]
R = State[(4*n.age+1):(5*n.age-1)]
#R = State[(4*n.age+1):(5*n.age)]
M_min = c(M[1],M[1:5])
S_min = c(S[1],S[1:(n.age-1)])
Is_min = c(Is[1],Is[1:(n.age-1)])
Im_min = c(Im[1],Im[1:(n.age-1)])
R_min = c(R[1],R[1:(n.age-1)])
# age movement
age.minus = c(1/8,1/8,1/8,1/24,1/48,1/144)
#age.minus = c(1/8,1/8,1/8,1/24,1/48,0)
age.plus = c(0,1/8,1/8,1/8,1/24,1/48)
# 6, 6*6
beta.t = beta*contact*(1 + b*cos((2*pi*Time - 52*phi)/52)) # n.age x n.age matrix of transmission b/t age groups
mu = mu(Time)
Y = (Is+0.5*Im)/(N*frac.pop) # infectious individuals times relative infectiousness (length n.age vector)
lambda = beta.t%*%Y # force of infection by age group (length n.age vector)
# relative risk of infection less for mild infections
lambda_s = 0.24*lambda
lambda_m = 0.76*lambda
# note: all compartments are now length n.age vectors
R.last = N - sum(State) # total pop. size is conserved
# note: need age transitions in R3
#dM = age.plus*M_min - age.minus*M + mu*N*c(1,rep(0,n.age-1)) - delta*M
# only allow births into first age group
# only allow maternal immunity at all until 2nd age group(2-3mo)
# after that, transfer directly M2 -> S3
dM =  mu*N*c(1,0,0,0,0,0) - c(1/8,1/8,0,0,0,0)*M + c(0,1/8,0,0,0,0)*M_min - delta*M
dS = age.plus*S_min - age.minus*S + delta*M - lambda*S + c(0,0,1/8,0,0,0)*M_min + tau*c(R,R.last)
dIs = age.plus*Is_min - age.minus*Is + lambda_s*S - gamma_s*Is
dIm = age.plus*Im_min - age.minus*Im + lambda_m*S - gamma_m*Im
dR = age.plus[1:(n.age-1)]*R_min[1:(n.age-1)] - age.minus[1:(n.age-1)]*R + gamma_s*Is[1:(n.age-1)] + gamma_m*Im[1:(n.age-1)] - tau*R
# fix the last age compartment in R to conserve pop size
#dM =  mu*N*c(1,0,0,0,0,0) - c(1/8,1/8,0,0,0,0)*M + c(0,1/8,0,0,0,0)*M_min - delta*M
#dS = age.plus*S_min - age.minus*S + delta*M - lambda*S + c(0,0,1/8,0,0,0)*M_min + tau*R
#dIs = age.plus*Is_min - age.minus*Is + lambda_s*S - gamma_s*Is
#dIm = age.plus*Im_min - age.minus*Im + lambda_m*S - gamma_m*Im
#dR = age.plus*R_min - age.minus*R + gamma_s*Is + gamma_m*Im - tau*R
return(list(c(dM,dS,dIs,dIm,dR)))
#})
}
runSIR = function(b,phi, case.t,beta1,beta2,beta3,beta4,beta5,beta6,atol) {
#print(beta1)
times = 1:case.t
N = 324935
M.0 = N*13/(5*52) # initial number of children <13weeks protected by maternal immunity
eq = (N-M.0)/5 # compartments besides M; choose starting values equally spread among compartments
init.vals = c(M=c(M.0,rep(0,n.age-1)),S=rep(eq/n.age,n.age),Is=rep(eq/n.age,n.age),Im=rep(eq/n.age,n.age),R=rep(eq/n.age,n.age-1))
#init.vals = c(M=c(M.0,rep(0,n.age-1)),S=rep(eq/n.age,n.age),Is=rep(eq/n.age,n.age),Im=rep(eq/n.age,n.age),R=rep(eq/n.age,n.age))
pars  <- list(	gamma_s	= 1,		# 1/mean infectious period(weeks), severe infection
gamma_m	= 2,		# 1/mean infectious period(weeks), mild infection
delta	= 1/13,		# 1/mean period of maternal immunity
tau	= 	1/52,		# 1/mean period of immunity following infection
N	  	= N,		# population(assume constant)
b		= b,		# seasonality amplitude
phi		= phi,		# seasonality offset (weeks)
beta1 = beta1,
beta2 = beta2,
beta3 = beta3,
beta4 = beta4,
beta5 = beta5,
beta6 = beta6
)
ode.out = lsoda(init.vals,times,SIRseason,pars, atol = atol)
return( ode.out )
}
# fitted posterior mean from rotavirus data (Park et al, 2017)
# they are parmeters of interst in our simulation studies
b = 0.43
phi = 7.35
r = 0.90
rho = 0.027
# they are provided in (Park et al, 2017)
N = 324935
longterm = 5*52 + 118
beta = c(1.30537122, 3.11852393, 0.03206678, 3.24118948, 0.31400672, 0.09410381)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1)
lastyears = (longterm-118+1):longterm
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1000000000000)
longterm = 1*52 + 118
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1e-3)
longterm = 0*52 + 118
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1e-3)
longterm = 5*52 + 118
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1e-3)
ode.out = lsoda(init.vals,times,SIRseason,pars, atol = atol)
# run dynamic SIR model
out = runSIR(b,phi,longterm, beta[1], beta[2], beta[3], beta[4], beta[5], beta[6], atol=1e-3)
mu.0 = 1/(52*5)	# estimated baseline birth rate
mu(10)
mu(1)
mu = function(t) {
mon = as.numeric( months( week.0 + 7*t, abb=TRUE ) )
mu.0 * ( 1 + amplitude[ mon ] )
}
mu(1)
help(months)
######################################################################################
##	Construct time-varying mu(t)
######################################################################################
plotweeks = as.Date("2009-12-23")
week.0 = plotweeks[1] - 3.5 # so that t=1 is the midpoint of the first week
mu.0 = 1/(52*5)	# estimated baseline birth rate
t=1
months( week.0 + 7*t, abb=TRUE )
as.numeric( months( week.0 + 7*t, abb=TRUE ) )
as.numeric("Dec")
match(months( week.0 + 7*t, abb=TRUE ),month.name)
match("Dec",month.name)
90/118
-log(1.2)
install.packages("truncnorm")
knitr::opts_chunk$set(echo = TRUE)
### IS
n = 1e4
library(truncnorm)
samples = rtruncnorm(n, 1,2,0,1)
res = mean(1/dnorm(samples))
res
### IS
n = 1e4
library(truncnorm)
samples = rtruncnorm(n, a=1,b=2,mean=0,sd=1)
res = mean(1/dnorm(samples))
res
### IS
n = 1e4
library(truncnorm)
samples = rtruncnorm(n, a=1,b=2,mean=0,sd=1)
res = sum(1/dnorm(samples))
res = n / res
res
### IS
n = 1e4
library(truncnorm)
samples = rtruncnorm(n, a=1,b=2,mean=0,sd=1)
res = mean(1/dnorm(samples))
res = 1 / res
res
(res)
n = 1e2
library(truncnorm)
samples = rtruncnorm(n, a=1,b=2,mean=0,sd=1)
res = mean(1/dnorm(samples))
res = 1 / res
res
samples = runif(n, 1,2)
res = exp(-0.5 * (samples)^2 / sqrt(2*pi))
res = mean(res)
(res)
compare = function(n){
k = matrix(nrow=1, ncol=2)
samples = rtruncnorm(n, a=1,b=2,mean=0,sd=1)
res = mean(1/dnorm(samples))
res = 1 / res
k[1,1] = res
samples = runif(n, 1,2)
res = exp(-0.5 * (samples)^2 / sqrt(2*pi))
res = mean(res)
k[1,2] = res
return(k)
}
res_matrix = matrix(nrow=10, ncol=2)
n = 500
for(i in c(1:10)){
num_samples = n * i
res_matrix[i,] = compare(n)
}
plot(res_matrix[,1])
lines(res_matrix[,2])
res_matrix = matrix(nrow=10, ncol=2)
n = 500
for(i in c(1:10)){
num_samples = n * (2**i)
res_matrix[i,] = compare(n)
}
plot(res_matrix[,1])
lines(res_matrix[,2])
plot(res_matrix[,2])
lines(res_matrix[,1])
plot(res_matrix[,2], col="red")
lines(res_matrix[,1], col="blue")
res_matrix = matrix(nrow=10, ncol=2)
n = 100
for(i in c(1:10)){
num_samples = n **i
res_matrix[i,] = compare(n)
}
plot(res_matrix[,2], col="red")
lines(res_matrix[,1], col="blue")
res_matrix
samples = runif(n, 1,2)
res = exp(-0.5 * (samples)^2 / sqrt(2*pi))
res = mean(res)
k[1,2] = res
samples = runif(n, 1,2)
res = exp(-0.5 * (samples)^2 / sqrt(2*pi))
res = mean(res)
res
n = 1e5
samples = runif(n, 1,2)
res = exp(-0.5 * (samples)^2 / sqrt(2*pi))
res = mean(res)
res
samples2 = runif(n, 1,2)
res2 = exp(-0.5 * (samples2)^2 / sqrt(2*pi))
res2 = mean(res2)
samples2 = runif(n, 1,2)
res2 = exp(-0.5 * (samples2)^2 / sqrt(2*pi))
res2 = mean(res2)
res2
n = 10
samples2 = runif(n, 1,2)
res2 = exp(-0.5 * (samples2)^2 / sqrt(2*pi))
res2
samples2
sqrt(2*pi)
(((samples2)^2) / sqrt(2*pi))
compare = function(n){
k = matrix(nrow=1, ncol=2)
samples = rtruncnorm(n, a=1,b=2,mean=0,sd=1)
res = mean(1/dnorm(samples))
res = 1 / res
k[1,1] = res
### MC integration
samples2 = runif(n, 1,2)
res2 = exp(-0.5 * (samples2)^2) / sqrt(2*pi)
res2 = mean(res2)
k[1,2] = res2
return(k)
}
res_matrix = matrix(nrow=10, ncol=2)
n = 100
for(i in c(1:10)){
num_samples = n **i
res_matrix[i,] = compare(n)
}
plot(res_matrix[,2], col="red")
lines(res_matrix[,1], col="blue")
res_matrix = matrix(nrow=100, ncol=2)
n = 200
for(i in c(1:10)){
num_samples = n *i
res_matrix[i,] = compare(n)
}
plot(res_matrix[,2], col="red")
lines(res_matrix[,1], col="blue")
res_matrix
res_matrix = matrix(nrow=100, ncol=2)
n = 200
for(i in c(1:100)){
num_samples = n *i
res_matrix[i,] = compare(n)
}
plot(res_matrix[,2], col="red")
lines(res_matrix[,1], col="blue")
plot(res_matrix[,2], col="red", type = "l")
lines(res_matrix[,1], col="blue")
pnorm(1)
pnorm(2)
pnorm(2) - pnorm(1)
true = pnorm(2) - pnorm(1)
res_matrix2 = abs(res_matrix - abs)
true = pnorm(2) - pnorm(1)
res_matrix2 = abs(res_matrix - true)
plot(res_matrix2[,2], col="red", type = "l")
lines(res_matrix2[,1], col="blue")
res_matrix = matrix(nrow=200, ncol=2)
n = 10
for(i in c(1:200)){
num_samples = n *i
res_matrix[i,] = compare(n)
}
true = pnorm(2) - pnorm(1)
res_matrix2 = abs(res_matrix - true)
plot(res_matrix2[,2], col="red", type = "l")
lines(res_matrix2[,1], col="blue")
true = pnorm(2) - pnorm(1)
res_matrix2 = abs(res_matrix - true)
plot(res_matrix2[,2], col="red", type = "b")
lines(res_matrix2[,1], col="blue")
true = pnorm(2) - pnorm(1)
res_matrix2 = abs(res_matrix - true)
plot(res_matrix2[,2], col="red", type = "l")
lines(res_matrix2[,1], col="blue")
apply(res_matrix, 2, mean)
apply(res_matrix, 2, mean)
setwd("C:/Users/dkcho/Desktop/ATVI/MCMC_code/MCMC_code/MSIR/For plotting")
BTAT = read.csv(file="BTAT_num27.csv", header = FALSE)
pMSIR = function(mat, name){
temp = mat
tlist = c(0.43, 7.35, 0.9, 0.027, 1.30537122, 3.11852393, 0.03206678, 3.24118948, 0.31400672, 0.09410381)
png(name,width=4000,height=3000,units='px',res=300)
par(mfrow=c(2,5), cex=1.75, mar=c(4,2,1,1)+0.1)
plot(density(temp[,1], adjust=1.5), col="black",main=expression("w"), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1, xlab="", xlim=c(0.2, 0.8))
abline(v=tlist[1],col='red',lty=2,lwd=2)
plot(density(temp[,2], adjust=1.5), col="black", main=expression(phi), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(6, 7.9))
abline(v=tlist[2],col='red',lty=2,lwd=2)
plot(density(temp[,4], adjust=1.5, to=1.0), col="black", main=expression("r"), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(0.6, 1.0))
abline(v=tlist[3],col='red',lty=2,lwd=2)
plot(density(temp[,3], adjust=1.5), col="black", main=expression(rho), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(0.02, 0.05))
abline(v=tlist[4],col='red',lty=2,lwd=2)
plot(density(temp[,5], adjust=1.5), col="black", main=expression(beta[01]), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(0.0, 3.0))
abline(v=tlist[5],col='red',lty=2,lwd=2)
plot(density(temp[,6], adjust=1.5), col="black", main=expression(beta[02]), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(1.5, 4.0))
abline(v=tlist[6],col='red',lty=2,lwd=2)
plot(density(temp[,7], adjust=1.5, from=0.0), col="black", main=expression(beta[03]), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(0.0, 1.5))
abline(v=tlist[7],col='red',lty=2,lwd=2)
plot(density(temp[,8], adjust=1.5), col="black", main=expression(beta[04]), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(1.5, 4.0))
abline(v=tlist[8],col='red',lty=2,lwd=2)
plot(density(temp[,9], adjust=1.5, from=0.0), col="black", main=expression(beta[05]), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(0.0, 1.5))
abline(v=tlist[9],col='red',lty=2,lwd=2)
plot(density(temp[,10], adjust=1.5, from=0.0), col="black", main=expression(beta[06]), cex.lab = 1.3, cex.main = 1.4, ylab="", cex.axis=1., xlab="", xlim=c(0.0, 1.5))
abline(v=tlist[10],col='red',lty=2,lwd=2)
dev.off()
}
pMSIR(BTAT, "BTAT_MSIR.png")
pMSIR = function(mat, name){
temp = mat
tlist = c(0.43, 7.35, 0.9, 0.027, 1.30537122, 3.11852393, 0.03206678, 3.24118948, 0.31400672, 0.09410381)
png(name,width=4500,height=3200,units='px',res=300)
par(mfrow=c(3,4), cex=1.75, mar=c(4,2,1,1)+0.1)
plot(density(temp[,1], adjust=1.5), col="black",main=expression("w"), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.2, 0.8))
abline(v=tlist[1],col='red',lty=2,lwd=2)
plot(density(temp[,2], adjust=1.5), col="black", main=expression(phi), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(6, 7.9))
abline(v=tlist[2],col='red',lty=2,lwd=2)
plot(density(temp[,4], adjust=1.5, to=1.0), col="black", main=expression("r"), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.6, 1.0))
abline(v=tlist[3],col='red',lty=2,lwd=2)
plot(density(temp[,3], adjust=1.5), col="black", main=expression(rho), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.02, 0.05))
abline(v=tlist[4],col='red',lty=2,lwd=2)
plot(density(temp[,5], adjust=1.5), col="black", main=expression(beta[01]), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.0, 3.0))
abline(v=tlist[5],col='red',lty=2,lwd=2)
plot(density(temp[,6], adjust=1.5), col="black", main=expression(beta[02]), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(1.5, 4.0))
abline(v=tlist[6],col='red',lty=2,lwd=2)
plot(density(temp[,7], adjust=1.5, from=0.0), col="black", main=expression(beta[03]), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.0, 1.5))
abline(v=tlist[7],col='red',lty=2,lwd=2)
plot(density(temp[,8], adjust=1.5), col="black", main=expression(beta[04]), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(1.5, 4.0))
abline(v=tlist[8],col='red',lty=2,lwd=2)
plot(density(temp[,9], adjust=1.5, from=0.0), col="black", main=expression(beta[05]), cex.lab = 1.3, cex.main =1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.0, 1.5))
abline(v=tlist[9],col='red',lty=2,lwd=2)
plot(density(temp[,10], adjust=1.5, from=0.0), col="black", main=expression(beta[06]), cex.lab = 1.3, cex.main = 1.6, ylab="", cex.axis=1.4, xlab="", xlim=c(0.0, 1.5))
abline(v=tlist[10],col='red',lty=2,lwd=2)
dev.off()
}
pMSIR(BTAT, "BTAT_MSIR.png")
